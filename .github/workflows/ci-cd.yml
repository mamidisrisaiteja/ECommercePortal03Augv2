name: ECommerce Portal - Test Automation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - auth
        - inventory
        - all

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  actions: read

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chromium]
      fail-fast: false
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📂 Cache Playwright Browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
        key: playwright-chromium-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          playwright-chromium-
        
    - name: �📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ⏳ Wait for System Startup
      run: |
        echo "Waiting for system initialization to complete..."
        # Wait for unattended-upgrades and other system processes
        sudo systemctl is-system-running --wait || true
        sleep 30
        
    - name: 🎭 Install Playwright with Dependencies
      run: |
        echo "Installing Playwright browsers for ${{ matrix.browser }}"
        
        # Wait for any existing apt processes to complete
        echo "Waiting for package manager to be available..."
        while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Package manager is locked, waiting 10 seconds..."
          sleep 10
        done
        
        # Wait for unattended-upgrades to complete if running
        while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
          echo "APT lists locked, waiting 10 seconds..."
          sleep 10
        done
        
        # Kill any hanging apt processes (if any)
        sudo pkill -f "apt|dpkg" || true
        
        # Clean up any partial installations
        sudo dpkg --configure -a || true
        
        # Update package lists with retry logic
        echo "Updating package lists..."
        for i in {1..3}; do
          if sudo apt-get update -qq; then
            break
          else
            echo "Update failed, retry $i/3 in 15 seconds..."
            sleep 15
          fi
        done
        
        # Install specific packages for Ubuntu 24.04 (Noble) - comprehensive dependencies
        echo "Installing system dependencies for Ubuntu 24.04..."
        sudo apt-get install -y \
          libasound2t64 \
          libatk-bridge2.0-0t64 \
          libatk1.0-0t64 \
          libatspi2.0-0 \
          libcairo-gobject2 \
          libcairo2 \
          libdrm2 \
          libgbm1 \
          libgdk-pixbuf-2.0-0 \
          libglib2.0-0 \
          libgtk-3-0t64 \
          libharfbuzz0b \
          libnspr4 \
          libnss3 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libwayland-client0 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          libdbus-glib-1-2 \
          xvfb \
          fonts-liberation \
          fonts-noto-color-emoji \
          ca-certificates
        
        # Install Playwright system dependencies using Python module
        echo "Skipping 'python -m playwright install-deps' - using manual package installation instead"
        
        # Install ALL browsers first to ensure dependencies are met
        echo "Installing all Playwright browsers to ensure dependencies..."
        python -m playwright install
        
        # Verify the specific browser installation
        echo "Verifying ${{ matrix.browser }} browser installation..."
        python -m playwright install ${{ matrix.browser }}
        
        # List installed browsers for debugging
        ls -la ~/.cache/ms-playwright/ || echo "Browser cache directory not found"
        
    - name: 🔧 Verify Playwright Installation
      run: |
        python -m playwright --version
        python -c "from playwright.sync_api import sync_playwright; print('Playwright import successful')"
        
    - name: 🖥️ Display System Info
      run: |
        echo "OS Info: $(lsb_release -d | cut -f2)"
        echo "Python Version: $(python --version)"
        echo "Playwright Version: $(python -m playwright --version)"
        echo "Available browsers: $(ls ~/.cache/ms-playwright/ 2>/dev/null || echo 'No browsers cached')"
        
    - name: 🧪 Run Smoke Tests (Default)
      if: github.event_name != 'workflow_dispatch'
      env:
        CI: true
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        PWDEBUG: 0
      run: |
        echo "Running smoke tests on ${{ matrix.browser }}"
        
        # Verify browser installation before running tests
        if [ ! -d "~/.cache/ms-playwright/${{ matrix.browser }}-"* ]; then
          echo "Browser not found, ensuring installation..."
          python -m playwright install ${{ matrix.browser }}
        fi
        
        # Create reports directory
        mkdir -p reports/html
        
        # Run Chromium tests
        echo "Running Chromium smoke tests"
        python -m pytest step_definitions/ -m smoke \
          --html=reports/html/smoke_report_${{ matrix.browser }}.html \
          --self-contained-html \
          --test-browser=${{ matrix.browser }} \
          --headless \
          -v --tb=short \
          --maxfail=5
          
    - name: 🧪 Run Selected Test Suite (Manual Trigger)
      if: github.event_name == 'workflow_dispatch'
      env:
        CI: true
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        PWDEBUG: 0
      run: |
        echo "Running ${{ github.event.inputs.test_suite }} tests on ${{ matrix.browser }}"
        
        # Verify browser installation before running tests
        if [ ! -d "~/.cache/ms-playwright/${{ matrix.browser }}-"* ]; then
          echo "Browser not found, ensuring installation..."
          python -m playwright install ${{ matrix.browser }}
        fi
        
        # Create reports directory
        mkdir -p reports/html
        
        # Run tests based on selected test suite
        if [ "${{ github.event.inputs.test_suite }}" = "all" ]; then
          echo "Running full test suite on Chromium"
          python -m pytest step_definitions/ \
            --html=reports/html/full_report_${{ matrix.browser }}.html \
            --self-contained-html \
            --test-browser=${{ matrix.browser }} \
            --headless \
            -v --tb=short \
            --maxfail=10
        else
          echo "Running ${{ github.event.inputs.test_suite }} test suite on Chromium"
          python -m pytest step_definitions/ -m ${{ github.event.inputs.test_suite }} \
            --html=reports/html/${{ github.event.inputs.test_suite }}_report_${{ matrix.browser }}.html \
            --self-contained-html \
            --test-browser=${{ matrix.browser }} \
            --headless \
            -v --tb=short \
            --maxfail=5
        fi
        
    - name: 📸 Upload Screenshots on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-${{ matrix.browser }}-${{ github.run_number }}
        path: reports/screenshots/
        retention-days: 30
        
    - name: 🎥 Upload Videos on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: videos-${{ matrix.browser }}-${{ github.run_number }}
        path: reports/videos/
        retention-days: 30
        
    - name: 📊 Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.browser }}-${{ github.run_number }}
        path: reports/html/
        retention-days: 30

  publish-reports:
    name: Publish Test Reports
    needs: test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download All Test Reports
      uses: actions/download-artifact@v4
      with:
        pattern: test-reports-*
        path: ./all-reports
        merge-multiple: true
        
    - name: 📋 Generate Test Summary
      run: |
        echo "# 🧪 Test Execution Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "**Build:** #${{ github.run_number }}" >> test-summary.md
        echo "**Commit:** ${{ github.sha }}" >> test-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> test-summary.md
        echo "**Triggered by:** ${{ github.event_name }}" >> test-summary.md
        echo "**Date:** $(date)" >> test-summary.md
        echo "" >> test-summary.md
        echo "## 📊 Test Reports" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "### 🌐 Chromium Browser" >> test-summary.md
        if [ -f "./all-reports/smoke_report_chromium.html" ]; then
          echo "- ✅ [Smoke Tests Report](./smoke_report_chromium.html)" >> test-summary.md
        fi
        if [ -f "./all-reports/auth_report_chromium.html" ]; then
          echo "- 🔐 [Authentication Tests Report](./auth_report_chromium.html)" >> test-summary.md
        fi
        if [ -f "./all-reports/inventory_report_chromium.html" ]; then
          echo "- 📦 [Inventory Tests Report](./inventory_report_chromium.html)" >> test-summary.md
        fi
        if [ -f "./all-reports/full_report_chromium.html" ]; then
          echo "- 📋 [Full Test Suite Report](./full_report_chromium.html)" >> test-summary.md
        fi
        echo "" >> test-summary.md
        
        echo "## 📈 Artifacts" >> test-summary.md
        echo "- Test reports are available as GitHub Action artifacts" >> test-summary.md
        echo "- Screenshots and videos available for failed tests" >> test-summary.md
        
    - name: 📤 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./all-reports
        destination_dir: test-reports/${{ github.run_number }}
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        
    - name: 💬 Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔒 Run Security Scan with Bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json || true
        
    - name: 📄 Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.run_number }}
        path: bandit-report.json
        retention-days: 30
